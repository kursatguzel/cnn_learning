import numpy as np
import h5py
import matplotlib.pyplot as plt
 
plt.rcParams['figure.figsize'] = (5.0, 4.0)
plt.rcParams['image.interpolation']= 'nearest'
plt.rcParams['image.cmap'] = 'gray'
 
np.random.seed(1)

def zero_pad(X, pad): #zero_pad adında fonksiyon kullandık
 
    x_pad = np.pad(X, ((0,0), (pad, pad), (pad,pad), (0,0)), 'constant', constant_values=0)

    return x_pad

np.random.seed(1) #zero_pad buraya aktardık
x = np.random.randn(4, 3, 3, 2)
x_pad = zero_pad(x, 2)
 
print ("x.shape =", x.shape)
print ("x_pad.shape =", x_pad.shape)
print ("x[1,1] =", x_pad[1,1])
print ("z_pad[1,1] =", x_pad[1,1])
 
fig, axarr = plt.subplots(1, 2)
axarr[0].set_title('x')
axarr[0].imshow(x[0,:,:,0])
axarr[1].set_title('x_pad')
axarr[1].imshow(x_pad[0,:,:,0])

def conv_single_step(a_slice_prev, W,b): #evrisim islemi
  s = np.multiply(a_slice_prev, W) #çarpma işlemini yapalım
  Z = np.sum(s) #toplama işlemini sağlayalım
  Z = float(b)+Z

  return Z

np.random.seed(1) #Değer atama

a_slice_prev = np.random.randn(4, 4, 3) # a matrisi 

W = np.random.randn(4, 4, 3) #Ağırlık matrisi tanımladık (filtre yani)

b= np.random.randn(1, 1, 1)

Z = conv_single_step(a_slice_prev, W, b)
print("Z=", Z)

#İleri yönlü hesaplama için tanımlanan fonksiyon
def conv_forward(A_prev, W, b, hparameters):
  # "n"= boyut demek, "H"= Yükseklik, "W"= Genişlik, "C"= Kanal sayısı
  (m, n_H_prev, n_W_prev, n_C_prev) = A_prev.shape

  (f, f, n_C_prev, n_C) = W.shape

  stride = hparameters['stride'] #Bura amaç stride değeri
  pad = hparameters['pad']

  n_H = int(((n_H_prev-f+2*pad)/stride)+1)# meşur formülümüzü uyguladık
  n_W = int(((n_W_prev-f+2*pad)/stride)+1)

  Z = np.zeros([m, n_H, n_W, n_C])

  A_prev_pad = zero_pad(A_prev, pad)
 #"a" matrisine piksel eklemek için 
  for i in range(m):
    a_prev_pad = A_prev_pad[i]
    for h in range (n_H):
      for w in range (n_W):
        for c in range (n_C):

          vert_start = h*stride
          vert_end = vert_start + f
          horiz_start = w*stride
          horiz_end = horiz_start + f

          a_slice_prev = a_prev_pad[vert_start:vert_end, horiz_start:horiz_end]

          Z[i, h, w, c] = conv_single_step(a_slice_prev, W[...,c], b[...,c])

  assert(Z.shape == (m, n_H, n_W, n_C)) # çıkış değer boyut kontrol
  cache = (A_prev, W, b, hparameters) # Geriye yayılım için "cache" sakladık
  return Z, cache

#Ekranda görmek için
np.random.seed(1)
A_prev = np.random.randn(10, 4, 4, 3)
W = np.random.randn(2, 2, 3, 8)
b = np.random.randn(1, 1, 1, 8)

hparameters = {"pad" :2,
               "stride" :2}
Z, cache_conv = conv_forward(A_prev, W, b, hparameters)

print("Z'nin ortalama =", np.mean(Z))
print("Z[3, 2, 1] =", Z[3, 2, 1])
print("cache_conv[0][1][2][3] =", cache_conv[0][1][2][3])

# Ortaklama (pool) katmanı
def pool_forward(A_prev, hparameters, mode = "max"):

  (m, n_H_prev, n_W_prev, n_C_prev) = A_prev.shape

  f = hparameters["f"]
  stride = hparameters["stride"]
#peeling uygulandığında pool için çıkış değerleri
  n_H = int(1 + (n_H_prev -f)/ stride)
  n_W = int(1 + (n_W_prev -f)/ stride)
  n_C = n_C_prev
# A matrisi ilklendirme işlemi
  A = np.zeros((m, n_H, n_W, n_C))
# matrisin içerik değerlerini çekmek için fo döngüsü kuracağız
  for i in range(m):
    for h in range(n_H):
      for w in range(n_W):
        for c in range(n_C):

          vert_start = h*stride
          vert_end = vert_start +f
          horiz_start = w*stride
          horiz_end = horiz_start +f 

          a_prev_slice = A_prev[i, vert_start:vert_end, horiz_start:horiz_end, c]
#ortaklama (pool) işlemini moda göre gerçekleştireceğiz
#Eğer "max" seçilirse max ya da "average" seçilirse average için if kullanaağız
          if mode == "max":
            A[i, h, w, c] = np.max(a_prev_slice)
          elif mode == "average":
            A[i, h, w, c] = np.mean(a_prev_slice)
  cache = (A_prev, hparameters)

  assert(A.shape == (m, n_H, n_W, n_C))

  return A, cache

# Değerleri tutup Ekranda Gösterelim
np.random.seed(1)

A_prev = np.random.randn(2, 4, 4, 3)
hparameters = {"stride" : 2, "f" :3}

A, cache = pool_forward(A_prev, hparameters)

print("mod = max")
print("A=", A)

A, cache = pool_forward(A_prev, hparameters, mode = "average")

print("mod = average")
print("A=", A)

#****Geri yönde işlenler*****
#Cache'de tutlan geçici değerleri çekeceğiz
def conv_backward(dZ, cache):
  (A_prev, W, b, hparameters) = cache
  (m, n_H_prev, n_W_prev, n_C_prev) = A_prev.shape

  (f, f, n_C_prev, n_C) = W.shape

  stride = hparameters['stride']
  pad = hparameters['pad']

  (m, n_H, n_W, n_C) = dZ.shape
#based değeri ile ilklendirme
  dA_prev = np.zeros((m, n_H_prev, n_W_prev, n_C_prev))
  dW = np.zeros((f, f, n_C_prev, n_C))
  db = np.zeros((1, 1, 1, n_C))

  A_prev_pad = zero_pad(A_prev, pad)
  dA_prev_pad = zero_pad(dA_prev, pad)
# Eğitim örnekleri için döngü yapılmalı
  for i in range(m):

      a_prev_pad = A_prev_pad[i]
      da_prev_pad = dA_prev_pad[i]

      for h in range(n_H):
          for w in range(n_W):
              for c in range(n_C):
# Köşe bulma işlemleri için
                  vert_start= h
                  vert_end = vert_start + f
                  horiz_start = w
                  horiz_end = horiz_start + f
# Köşeleri kullanarak "a_prev" üzerinde işlemleri yapıyoruz          
                  a_slice = a_prev_pad[vert_start:vert_end, horiz_start:horiz_end, :]
#Her bir filtre için gradyan ve tra parametrelerini güncellememiz lazım
                  da_prev_pad[vert_start:vert_end, horiz_start:horiz_end, :] += W[:,:,:,c] * dZ[i, h, w, c]

                  dW[:,:,:,c] += a_slice * dZ[i, h, w, c]
                  db[:,:,:,c] += dZ[i, h, w, c]
      dA_prev[i, :, :, :] = da_prev_pad[pad:-pad, pad:-pad, :]
  assert(dA_prev.shape == (m, n_H_prev, n_W_prev, n_C_prev))
  
  return dA_prev, dW, db

# Ekrana yazdırma ve değerleri tanımlama
np.random.seed(1)
dA, dW, db = conv_backward(Z, cache_conv)
# Türevlerinin ortalama değerelerin hesapladık ve ekrana yazdırıyoruz
print("dA ortalama =", np.mean(dA))
print("dw ortalama =", np.mean(dW))
print("db ortalama =", np.mean(db))

#Geriye yayılımda bu türevlere göre "max" ortaklama "pool" (ortaklama) ortaklaması işlemleri yapılsın
#Öncelikle bir maske tanımlayalım ve bu maskeye göre geriye yayılımda
#"max" ortaklama ve "pool" ortaklama işlemlerini yapalım
def create_mask_from_window(x):

  mask = x == np.max(x)

  return mask

#Burada "max" değerleri elde ederek bulduk. Bunun sebebi ise
#ileri yönde çıkışta oluşacak hataya etki eden en önemli değer maksimumdur.
#Not: Hata geriye yayılımda maksimum değer üzerinden yayılır.
np.random.seed(1)
x = np.random.randn(2,3)
mask = create_mask_from_window(x)

print('x =', x)
print('maske=', mask)

#"pool" üzerinde değrin nasıl oluştuğu ile ilgili bir fonksiyon yazalım
#Önemi nedir? maksimum ortaklamada yalnızca en büyük değerin çıkıştaji değere etki ederken,
#pool'da her bir değere eşit oranda etki eder.
def distribute_value(dz, shape):

   (n_H, n_W) = shape
   average = dz / (n_H * n_W)

   a = np.ones(shape) * average

   return a

a = distribute_value(2, (2,2))

print('Dağıtılmış değer =', a)

#Hem "max" hem de "averga" için tüm ortaklamaları tanımlayalım
def pool_backward(dA, cache, mode= 'max'):

  (A_prev, hparameters) = cache

  stride = hparameters['stride']
  f = hparameters['f']

  m, n_H_prev, n_W_prev, n_C_prev = A_prev.shape

  m, n_H, n_W, n_C = dA.shape

  dA_prev = np.zeros(A_prev.shape)

  for i in range(m):
      a_prev = A_prev[i]
      for h in range(n_H):
          for w in range(n_W):
              for c in range(n_C):

                   vert_start = h
                   vert_end = vert_start + f
                   horiz_start = w
                   horiz_end = horiz_start + f

                   if mode == "max":
                       a_prev_slice = a_prev[vert_start:vert_end, horiz_start:horiz_end, c]
                       mask = create_mask_from_window(a_prev_slice)
                       dA_prev[i, vert_start: vert_end, horiz_start: horiz_end, c] += np.multiply(mask, dA[i, h, w, c])
                   elif mode == "average":
                        da = dA[i, h, w, c]
 
                        shape = (f, f)
                        dA_prev[i, vert_start:vert_end, horiz_start:horiz_end, c] += distribute_value(da, shape)
  assert(dA_prev.shape == A_prev.shape)
  return dA_prev

#Geriye yayılım ile güncellenen ağırlıklar ve diğer parametreler
np.random.seed(1)

A_prev = np.random.randn(5, 5, 3, 2)
hparameters = {"stride": 1, "f": 2}
A, cache = pool_forward(A_prev, hparameters)
dA = np.random.randn(5, 4, 2, 2)

dA_prev = pool_backward(dA, cache, mode= "max")

print("mod = max")
print('dA ortalaması =', np.max(dA))
print('dA_prev[1,1]', dA_prev[1,1])
print()

dA_prev = pool_backward(dA, cache, mode= "average")

print("mod = average")
print('dA ortalaması =', np.mean(dA))
print('dA_prev[1,1]', dA_prev[1,1])
